// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const createImagesUploadRequest = z.lazy(() => {
  return z.object({
    file: z.instanceof(ArrayBuffer).optional(),
    subId: z.string().optional(),
    breedIds: z.string().optional(),
  });
});

/**
 *
 * @typedef  {CreateImagesUploadRequest} createImagesUploadRequest
 * @property {ArrayBuffer}
 * @property {string} - [optional] - a string you can use to segment your images, e.g. knowing which of your own users uploaded it.
 * @property {string} - [optional] comma separated string of breed ids contained in the image
 */
export type CreateImagesUploadRequest = z.infer<typeof createImagesUploadRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const createImagesUploadRequestResponse = z.lazy(() => {
  return z
    .object({
      file: z.instanceof(ArrayBuffer).optional(),
      sub_id: z.string().optional(),
      breed_ids: z.string().optional(),
    })
    .transform((data) => ({
      file: data['file'],
      subId: data['sub_id'],
      breedIds: data['breed_ids'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const createImagesUploadRequestRequest = z.lazy(() => {
  return z
    .object({
      file: z.instanceof(ArrayBuffer).optional(),
      subId: z.string().optional(),
      breedIds: z.string().optional(),
    })
    .transform((data) => ({
      file: data['file'],
      sub_id: data['subId'],
      breed_ids: data['breedIds'],
    }));
});
