// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse, RequestConfig } from '../../http/types';
import { RequestBuilder } from '../../http/transport/request-builder';
import { SerializationStyle } from '../../http/serialization/base-serializer';
import { Environment } from '../../http/environment';
import {
  CreateImagesByImageIdBreedsParams,
  CreateImagesUploadParams,
  DeleteImagesByImageIdBreedsByBreedIdParams,
  DeleteImagesByImageIdParams,
  GetImagesBkIEhN3pGParams,
  GetImagesByImageIdBreedsParams,
  GetImagesParams,
  ImagesListSearchOrRandomParams,
} from './request-params';
import { CreateImagesUploadRequest, createImagesUploadRequestRequest } from './models/create-images-upload-request';

export class ImagesService extends BaseService {
  /**
 * Searches or returns Random selection from all approved images. Default is to return RANDOM images, but with an API-Key you can use 'order=DESC' or 'order=ASC' along with the 'page' and 'limit' parameters to paginate through them in the order they were approved.
Pagination-Count, Pagination-Page, and Pagination-Limit headers are present in the response so you know the total number of images that can be paginated through for the passed search filters.
 * @param {string} [params.size] - [optional] thumb , small, med or full - small is perfect for Discord
 * @param {string} [params.mimeTypes] - [optional] a comma separated string of types to return e.g. jpg,png for static, or gif for gifs
 * @param {string} [params.format] - [optional] json | src
 * @param {boolean} [params.hasBreeds] - [optional] - only return images with breed data
 * @param {string} [params.order] - [optional] default:RANDOM - RANDOM | ASC | DESC
 * @param {number} [params.page] - [optional] paginate through results
 * @param {number} [params.limit] - [optional] number of results to return, up to 25 with a valid API-Key
 * @param {string} [params.contentType] - 
 * @param {string} [params.xApiKey] - [optional] without it only the a basic set of images can be searched
 * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
 * @returns {Promise<HttpResponse<any>>} OK
 */
  async imagesListSearchOrRandom(
    params?: ImagesListSearchOrRandomParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<any>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('GET')
      .setPath('/images/search')
      .setRequestSchema(z.any())
      .addAccessTokenAuth(this.config.token, 'Bearer')
      .addApiKeyAuth(this.config.apiKey)
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: z.any(),
        contentType: ContentType.Json,
        status: 200,
      })
      .addError({
        error: Error,
        contentType: ContentType.Json,
        status: 401,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addQueryParam({
        key: 'size',
        value: params?.size,
      })
      .addQueryParam({
        key: 'mime_types',
        value: params?.mimeTypes,
      })
      .addQueryParam({
        key: 'format',
        value: params?.format,
      })
      .addQueryParam({
        key: 'has_breeds',
        value: params?.hasBreeds,
      })
      .addQueryParam({
        key: 'order',
        value: params?.order,
      })
      .addQueryParam({
        key: 'page',
        value: params?.page,
      })
      .addQueryParam({
        key: 'limit',
        value: params?.limit,
      })
      .addHeaderParam({
        key: 'Content-Type',
        value: params?.contentType,
      })
      .addHeaderParam({
        key: 'x-api-key',
        value: params?.xApiKey,
      })
      .build();
    return this.client.call<any>(request);
  }

  /**
 * Get the raw analysis results for any uploaded image
 * @param {string} [params.xApiKey] - [optional]  will save this request to your account analytics

 * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
 * @returns {Promise<HttpResponse<any>>} OK
 */
  async getImagesBkIEhN3pG(
    params?: GetImagesBkIEhN3pGParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<any>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('GET')
      .setPath('/images/BkIEhN3pG')
      .setRequestSchema(z.any())
      .addAccessTokenAuth(this.config.token, 'Bearer')
      .addApiKeyAuth(this.config.apiKey)
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: z.any(),
        contentType: ContentType.Json,
        status: 200,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addHeaderParam({
        key: 'x-api-key',
        value: params?.xApiKey,
      })
      .build();
    return this.client.call<any>(request);
  }

  /**
 * Only returns images from your account, uploaded via 'api/v1/images/upload'
 * @param {string} xApiKey - - will return all the images from your account

 * @param {number} [params.limit] - [Optional] number of images to return valid  1 to 10 - default: 1
 * @param {number} [params.page] - [Optional] only works if account_id is present to page through your own uploads
 * @param {string} [params.order] - [Optional] only works if account_id is present, either ASC or DESC - ascending or descending.
 * @param {string} [params.contentType] - 
 * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
 * @returns {Promise<HttpResponse<any>>} OK
 */
  async getImages(params: GetImagesParams, requestConfig?: RequestConfig): Promise<HttpResponse<any>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('GET')
      .setPath('/images/')
      .setRequestSchema(z.any())
      .addAccessTokenAuth(this.config.token, 'Bearer')
      .addApiKeyAuth(this.config.apiKey)
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: z.any(),
        contentType: ContentType.Json,
        status: 200,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addQueryParam({
        key: 'limit',
        value: params?.limit,
      })
      .addQueryParam({
        key: 'page',
        value: params?.page,
      })
      .addQueryParam({
        key: 'order',
        value: params?.order,
      })
      .addHeaderParam({
        key: 'Content-Type',
        value: params?.contentType,
      })
      .addHeaderParam({
        key: 'x-api-key',
        value: params?.xApiKey,
      })
      .build();
    return this.client.call<any>(request);
  }

  /**
   * Make sure you're using the right field to send the image, and Content-Type header
   * @param {string} xApiKey - - saves the uploaded image to your account.
   * @param {string} [params.contentType] -
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<any>>} Created
   */
  async createImagesUpload(
    body: CreateImagesUploadRequest,
    params: CreateImagesUploadParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<any>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('POST')
      .setPath('/images/upload')
      .setRequestSchema(createImagesUploadRequestRequest)
      .addAccessTokenAuth(this.config.token, 'Bearer')
      .addApiKeyAuth(this.config.apiKey)
      .setRequestContentType(ContentType.MultipartFormData)
      .addResponse({
        schema: z.any(),
        contentType: ContentType.Json,
        status: 201,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addHeaderParam({
        key: 'Content-Type',
        value: params?.contentType,
      })
      .addHeaderParam({
        key: 'x-api-key',
        value: params?.xApiKey,
      })
      .addHeaderParam({ key: 'Content-Type', value: 'multipart/form-data' })
      .addBody(body)
      .build();
    return this.client.call<any>(request);
  }

  /**
   *
   * @param {string} imageId -
   * @param {string} [params.contentType] -
   * @param {string} [params.xApiKey] -
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<any>>} Successful response
   */
  async deleteImagesByImageId(
    imageId: string,
    params?: DeleteImagesByImageIdParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<any>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('DELETE')
      .setPath('/images/{image_id}')
      .setRequestSchema(z.any())
      .addAccessTokenAuth(this.config.token, 'Bearer')
      .addApiKeyAuth(this.config.apiKey)
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: z.any(),
        contentType: ContentType.Json,
        status: 200,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'image_id',
        value: imageId,
      })
      .addHeaderParam({
        key: 'Content-Type',
        value: params?.contentType,
      })
      .addHeaderParam({
        key: 'x-api-key',
        value: params?.xApiKey,
      })
      .build();
    return this.client.call<any>(request);
  }

  /**
   *
   * @param {string} imageId -
   * @param {string} [params.contentType] -
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<any>>} Successful response
   */
  async getImagesByImageIdBreeds(
    imageId: string,
    params?: GetImagesByImageIdBreedsParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<any>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('GET')
      .setPath('/images/{image_id}/breeds')
      .setRequestSchema(z.any())
      .addAccessTokenAuth(this.config.token, 'Bearer')
      .addApiKeyAuth(this.config.apiKey)
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: z.any(),
        contentType: ContentType.Json,
        status: 200,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'image_id',
        value: imageId,
      })
      .addHeaderParam({
        key: 'Content-Type',
        value: params?.contentType,
      })
      .build();
    return this.client.call<any>(request);
  }

  /**
 * 
 * @param {string} imageId - 
 * @param {string} xApiKey - - for now, you can only tag your own images with a breed


 * @param {string} [params.contentType] - 
 * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
 * @returns {Promise<HttpResponse<any>>} Successful response
 */
  async createImagesByImageIdBreeds(
    imageId: string,
    body: any,
    params: CreateImagesByImageIdBreedsParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<any>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('POST')
      .setPath('/images/{image_id}/breeds')
      .setRequestSchema(z.any())
      .addAccessTokenAuth(this.config.token, 'Bearer')
      .addApiKeyAuth(this.config.apiKey)
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: z.any(),
        contentType: ContentType.Json,
        status: 200,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'image_id',
        value: imageId,
      })
      .addHeaderParam({
        key: 'Content-Type',
        value: params?.contentType,
      })
      .addHeaderParam({
        key: 'x-api-key',
        value: params?.xApiKey,
      })
      .addHeaderParam({ key: 'Content-Type', value: 'application/json' })
      .addBody(body)
      .build();
    return this.client.call<any>(request);
  }

  /**
 * 
 * @param {string} imageId - 
 * @param {string} breedId - 
 * @param {string} xApiKey - - only you can delete breeds from your images

 * @param {string} [params.contentType] - 
 * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
 * @returns {Promise<HttpResponse<any>>} Successful response
 */
  async deleteImagesByImageIdBreedsByBreedId(
    imageId: string,
    breedId: string,
    params: DeleteImagesByImageIdBreedsByBreedIdParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<any>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('DELETE')
      .setPath('/images/{image_id}/breeds/{breed_id}')
      .setRequestSchema(z.any())
      .addAccessTokenAuth(this.config.token, 'Bearer')
      .addApiKeyAuth(this.config.apiKey)
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: z.any(),
        contentType: ContentType.Json,
        status: 200,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'image_id',
        value: imageId,
      })
      .addPathParam({
        key: 'breed_id',
        value: breedId,
      })
      .addHeaderParam({
        key: 'Content-Type',
        value: params?.contentType,
      })
      .addHeaderParam({
        key: 'x-api-key',
        value: params?.xApiKey,
      })
      .build();
    return this.client.call<any>(request);
  }
}
