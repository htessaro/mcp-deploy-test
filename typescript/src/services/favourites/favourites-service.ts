// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse, RequestConfig } from '../../http/types';
import { RequestBuilder } from '../../http/transport/request-builder';
import { SerializationStyle } from '../../http/serialization/base-serializer';
import { Environment } from '../../http/environment';
import {
  CreateFavouritesParams,
  DeleteFavouritesByFavouriteIdParams,
  GetFavouritesByFavouriteIdParams,
  GetFavouritesParams,
} from './request-params';

export class FavouritesService extends BaseService {
  /**
   *
   * @param {string} xApiKey -
   * @param {string} [params.contentType] -
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<any>>} OK
   */
  async getFavourites(params: GetFavouritesParams, requestConfig?: RequestConfig): Promise<HttpResponse<any>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('GET')
      .setPath('/favourites')
      .setRequestSchema(z.any())
      .addAccessTokenAuth(this.config.token, 'Bearer')
      .addApiKeyAuth(this.config.apiKey)
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: z.any(),
        contentType: ContentType.Json,
        status: 200,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addHeaderParam({
        key: 'Content-Type',
        value: params?.contentType,
      })
      .addHeaderParam({
        key: 'x-api-key',
        value: params?.xApiKey,
      })
      .build();
    return this.client.call<any>(request);
  }

  /**
   *
   * @param {string} xApiKey -
   * @param {string} [params.contentType] -
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<any>>} OK
   */
  async createFavourites(
    body: any,
    params: CreateFavouritesParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<any>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('POST')
      .setPath('/favourites')
      .setRequestSchema(z.any())
      .addAccessTokenAuth(this.config.token, 'Bearer')
      .addApiKeyAuth(this.config.apiKey)
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: z.any(),
        contentType: ContentType.Json,
        status: 200,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addHeaderParam({
        key: 'Content-Type',
        value: params?.contentType,
      })
      .addHeaderParam({
        key: 'x-api-key',
        value: params?.xApiKey,
      })
      .addHeaderParam({ key: 'Content-Type', value: 'application/json' })
      .addBody(body)
      .build();
    return this.client.call<any>(request);
  }

  /**
   *
   * @param {string} favouriteId -
   * @param {string} xApiKey -
   * @param {string} [params.contentType] -
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<any>>} Successful response
   */
  async getFavouritesByFavouriteId(
    favouriteId: string,
    params: GetFavouritesByFavouriteIdParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<any>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('GET')
      .setPath('/favourites/{favourite_id}')
      .setRequestSchema(z.any())
      .addAccessTokenAuth(this.config.token, 'Bearer')
      .addApiKeyAuth(this.config.apiKey)
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: z.any(),
        contentType: ContentType.Json,
        status: 200,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'favourite_id',
        value: favouriteId,
      })
      .addHeaderParam({
        key: 'Content-Type',
        value: params?.contentType,
      })
      .addHeaderParam({
        key: 'x-api-key',
        value: params?.xApiKey,
      })
      .build();
    return this.client.call<any>(request);
  }

  /**
   *
   * @param {string} favouriteId -
   * @param {string} xApiKey -
   * @param {string} [params.contentType] -
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<any>>} Successful response
   */
  async deleteFavouritesByFavouriteId(
    favouriteId: string,
    params: DeleteFavouritesByFavouriteIdParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<any>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('DELETE')
      .setPath('/favourites/{favourite_id}')
      .setRequestSchema(z.any())
      .addAccessTokenAuth(this.config.token, 'Bearer')
      .addApiKeyAuth(this.config.apiKey)
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: z.any(),
        contentType: ContentType.Json,
        status: 200,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'favourite_id',
        value: favouriteId,
      })
      .addHeaderParam({
        key: 'Content-Type',
        value: params?.contentType,
      })
      .addHeaderParam({
        key: 'x-api-key',
        value: params?.xApiKey,
      })
      .build();
    return this.client.call<any>(request);
  }
}
